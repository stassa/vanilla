:-module(koch_curve, [background_knowledge/2
                     ,metarules/2
                     ,labelled_example/2
                     ,unlabelled_example/2
                     ,f/2
                     ,plus/2
                     ,minus/2
                     ,empty/2
                     ,generate_examples/5
                     ]).

:-use_module(project_root(configuration)).
:-use_module(lib(poker/poker_configuration),[]).
:-use_module(lib(poker/poker_auxiliaries)).
:-use_module(data(poker_examples/test_harness)).
:-use_module(lib(poker/normal_forms/lindenmayer_normal_form)).

/** <module> Learn an L-System grammar modelling the Koch Curve fractal.

==
?- _T = s/3, time( poker:learn(_T,_Pos,_Neg,_Ps) ), auxiliaries:print_clauses('Hypothesis:',_Ps), maplist(length,[_Ps,_Pos,_Neg],[Ps,Pos,Neg]).
% 15,255,302 inferences, 0.969 CPU in 2.543 seconds (38% CPU, 15747409 Lips)
Hypothesis:
s(A,B,C):-plus(B,D),plus(A,E),s(E,D,C).
s(A,B,C):-minus(B,D),minus(A,E),s(E,D,C).
s(A,B,C):-f(B,D),f(A,E),plus(E,F),f(F,G),minus(G,H),minus(H,I),f(I,J),plus(J,K),f(K,L),s(L,D,C).
s(A,B,B):-empty(A,B).
Ps = 4,
Pos = 21,
Neg = 81.
==

*/

% Language alphabet for the constraints defeined
% in lib/poker/normal_forms/lindenmayer_normal_form.pl
%
lnf:target(s).
lnf:invented(inv_1).
lnf:invented(inv_2).
lnf:invented(inv_3).
lnf:invented(inv_4).
lnf:invented(inv_5).
lnf:invented(inv_6).
lnf:preterminal(f).
lnf:preterminal(plus).
lnf:preterminal(minus).
lnf:preterminal(empty).


/*
% Raises error despite importing poker_auxiliaries. Why?
% Best way to use currently is to load file for the first time when this
% is commented out, then uncomment and reload the file (with make/0).

:-poker_auxiliaries:set_poker_configuration_option(clause_limit,[6]).
:-poker_auxiliaries:set_poker_configuration_option(flatten_prove_all,[true]).
:-poker_auxiliaries:set_poker_configuration_option(max_invented,[4]).
:-poker_auxiliaries:set_poker_configuration_option(unlabelled_examples,[100]).
:-poker_auxiliaries:set_poker_configuration_option(unlabelled_examples_order
						  ,[random]).
:-poker_auxiliaries:set_poker_configuration_option(unfold_invented,[all]).
:-poker_auxiliaries:set_poker_configuration_option(reduction,[plotkins]).
*/


%!	safe_example(-Example) is nondet.
%
%	Generate a safe scaffold for unlabelled examples.
%
%	For examples with list arguments, generating unlabelled examples
%	during learning can "go infinite". This predicate ensures that
%	list arguments in examples are limited in length.
%
%	This argument should not itself be a generator of ground
%	examples. This is left to the user to avoid.
%
poker_configuration:safe_example(m(s,Is,Os,[])):-
        K = 8
	,between(0,K,I)
	,length(Is,I)
	,between(0,K,J)
	,length(Os,J).

background_knowledge(s/3,[f/2
                         ,plus/2
                         ,minus/2
                         ,empty/2
                         ]).

metarules(s/3,[ls_constant,ls_variable,ls_base,chain,tri_chain]).

labelled_example(s/3,E):-
        generate_initial(koch_curve,all,0,3,Es)
        ,member(E,Es).
labelled_example(s/3,E):-
% The first Koch Curve string that contains variable symbols has
% length 8.
        generate_initial(koch_curve,all,8,9,Es)
        ,findall(s(Is,Os,[])
                ,(member(s(Is,Os,[]),Es)
                 ,member(f,Is)
                 )
                ,Vs)
        ,G = member(E,Vs)
        ,limit(8, G).

unlabelled_example(s/3,_):- fail.

f --> [f].
plus --> [+].
minus --> [-].
empty --> [].

% Generate examples for evaluation.
% Examples are generated by test harndes predicates.
%
generate_examples(pos,koch_curve,all,0,14).
generate_examples(neg,not_koch_curve,all,0,5).
